reg1 <- lm(response ~ V1 + V2 + V3, data=df1)
summary(reg1)
gvlma(reg1)
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(V2= sample(1:1000, size=1000, replace=TRUE)) %>%
mutate(V3= rnorm(1000, mean=260, sd=300)) %>%
mutate(epsilon = rnorm(1000, mean=7, sd=2)) %>%
mutate(response = 14 + 6* V1  + epsilon)
reg1 <- lm(response ~ V1 + V2 + V3, data=df1)
summary(reg1)
gvlma(reg1)
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
reg1 <- lm(response ~ V1 + V2 + V3, data=df1)
summary(reg1)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(V2= sample(1:1000, size=1000, replace=TRUE)) %>%
mutate(V3= rnorm(1000, mean=260, sd=300)) %>%
mutate(epsilon = rnorm(1000, mean=7, sd=4)) %>%
mutate(response = 14 + 6* V1  + epsilon)
reg1 <- lm(response ~ V1 + V2 + V3, data=df1)
summary(reg1)
gvlma(reg1)
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=7, sd=4)) %>%
mutate(response = 14 + 6* V1  + epsilon)
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
ggplot(df1, aes(x=V1)) + geom_histogram()
ggplot(df1, aes(x=epsilon)) + geom_histogram()
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=4)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
gvlma(reg2)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg2 <- lm(response ~ V1, data=df1)
summary(reg2)
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=1)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=10)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=5, sd=10)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 14 + 6* V1  + epsilon)
ggplot(df1, aes(x=V1, y=response)) + geom_point()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
ggplot(data=df1, x=V1) + geom_boxplot()
ggplot(data=df1, x=V1, y=response) + geom_boxplot()
ggplot(data=df1, aes(x=V1, y=response)) + geom_boxplot()
ggplot(data=df1, aes(x=V1) + geom_boxplot()
View(df1)
ggplot(data=df1, aes(x=V1, y=V1) + geom_boxplot()
ggplot(data=df1, aes(x=V1, y=V1) + geom_boxplot())
ggplot(data=df1, aes(x=response, y=V1) + geom_boxplot())
View(df1)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 14 + 6* V1  + epsilon) %>%
mutate(group=1)
View(df1)
ggplot(data=df1, aes(x=group, y=V1) + geom_boxplot())
ggplot(data=df1, aes(x=group, y=V1)) + geom_boxplot()
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=5, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 14 + 6* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
View(df1)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 14 + 6* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1)) + geom_boxplot()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=5)) %>%
mutate(response = 3 + 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=1)) %>%
mutate(response = 3 + 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, se=TRUE)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*1000, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(1000, mean=0, sd=1)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
set.seed(1)
df1 <- as.data.frame(matrix(runif(1*50, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(50, mean=0, sd=1)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
set.seed(123)
df1 <- as.data.frame(matrix(runif(1*50, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(50, mean=0, sd=1)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
set.seed(123)
df1 <- as.data.frame(matrix(runif(1*50, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(50, mean=0, sd=2)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(df1, aes(x=V1, y=response)) + geom_point()
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red")
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red") + theme_classic()
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red") + theme_classic() _+ xlab("Predictor") + ylab("Response")
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red") + theme_classic() + xlab("Predictor") + ylab("Response")
library(thematicmaps)
library(tidyverse)
library(tidyverse)
library(gvlma)
set.seed(123)
df1 <- as.data.frame(matrix(runif(1*50, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(50, mean=0, sd=2)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red") + theme_classic() + xlab("Predictor") + ylab("Response")
library(thematicmaps)
library(tidyverse)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
pc4_locations <- read.csv2("../Sourcedata/nld_pc4_locations.csv")%>%
mutate(X=as.numeric(as.character(X))) %>%
mutate(Y=as.numeric(as.character(Y)))
pc4_locations <- read.csv2("../Sourcedata/nld_pc4_locations.csv")%>%
mutate(X=as.numeric(as.character(X))) %>%
mutate(Y=as.numeric(as.character(Y)))
str(pc4_locations)
View(map_municipal)
View(pc4_locations)
View(map_municipal)
View(pc4_locations)
pc4_locations <- pc4_locations %>%
mutate(PC3= substr(PC4, 1:3))
pc4_locations <- pc4_locations %>%
mutate(PC3= substr(PC4, 1,2,3))
pc4_locations <- pc4_locations %>%
mutate(PC3= substr(PC4, 1,3))
View(map_municipal)
View(pc4_locations)
pc4_locations <- pc4_locations %>%
mutate(PC3= substr(PC4, 1,3))%>%
select(PC3, PC4, X, Y)
View(map_municipal)
pc4_locations <- read.csv2("../Sourcedata/nld_pc4_locations.csv")%>%
schools <- read.csv2("../Sourcedata/schools.csv")%>%
schools <- read.csv2("../Sourcedata/schools.csv")
View(schools)
View(schools)
schools1 <- schools %>%
mutate(PC4= substr(POSTCODE, 1,4))
View(schools1)
schools1 <- schools %>%
mutate(PC4= substr(POSTCODE, 1,4)) %>%
select(PC4, DENOMINATIE)
school_loc <- inner_join(pc4_locations, schools1, by="PC4")
schools1 <- schools %>%
mutate(PC4= as.integer(substr(POSTCODE, 1,4))) %>%
select(PC4, DENOMINATIE)
school_loc <- inner_join(pc4_locations, schools1, by="PC4")
AddMapLayer(MapPlot(), map_municipal) %>%
AddPointsLayer(school_loc, columnNameColor = "DENOMINATIE")
school_loc <- inner_join(pc4_locations, schools1, by="PC4") %>%
filter(DENOMINATIE == Rooms_Katholiek)
school_loc <- inner_join(pc4_locations, schools1, by="PC4") %>%
filter(DENOMINATIE == "Rooms_Katholiek")
AddMapLayer(MapPlot(), map_municipal) %>%
AddPointsLayer(school_loc, columnNameColor = "DENOMINATIE")
View(schools1)
school_loc <- inner_join(pc4_locations, schools1, by="PC4") %>%
filter(DENOMINATIE == "Rooms-Katholiek")
AddMapLayer(MapPlot(), map_municipal) %>%
AddPointsLayer(school_loc, columnNameColor = "DENOMINATIE")
View(schools)
school_loc <- inner_join(pc4_locations, schools1, by="PC4") %>%
filter(DENOMINATIE == "Rooms-Katholiek" | DENOMINATIE == "Protestants-Christelijk")
AddMapLayer(MapPlot(), map_municipal) %>%
AddPointsLayer(school_loc, columnNameColor = "DENOMINATIE")
library(tidyverse)
library(gvlma)
set.seed(123)
df1 <- as.data.frame(matrix(runif(1*50, min=1, max=10), ncol=1)) %>%
mutate(epsilon = rnorm(50, mean=0, sd=2)) %>%
mutate(response = 3 - 2* V1  + epsilon) %>%
mutate(group= ifelse(V1 <= 5, 1,2))
ggplot(data=df1, aes(x=group, y=V1, group=group)) + geom_boxplot()
reg1 <- lm(response ~ V1, data=df1)
summary(reg1)
gvlma(reg1)
ggplot(data=df1, aes(x=V1, y=response)) + geom_point() + geom_smooth(method=lm, color="red") + theme_classic() + xlab("Predictor") + ylab("Response")
library(thematicmaps)
library(tidyverse)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
pc4_locations <- read.csv2("../Sourcedata/nld_pc4_locations.csv")%>%
mutate(X=as.numeric(as.character(X))) %>%
mutate(Y=as.numeric(as.character(Y)))
str(pc4_locations)
schools <- read.csv2("../Sourcedata/schools.csv")
schools1 <- schools %>%
mutate(PC4= as.integer(substr(POSTCODE, 1,4))) %>%
select(PC4, DENOMINATIE)
school_loc <- inner_join(pc4_locations, schools1, by="PC4") %>%
filter(DENOMINATIE == "Rooms-Katholiek" | DENOMINATIE == "Protestants-Christelijk")
AddMapLayer(MapPlot(), map_municipal) %>%
AddPointsLayer(school_loc, columnNameColor = "DENOMINATIE")
library(tidyverse)
library(readxl)
football <- read.csv2("../Sourcedata/football.csv")
football
head(football)
tail(football)
summary(football)
football1 <- read.csv2("../Sourcedata/N1.csv")
head(football1)
football2 <- read.csv2("../Sourcedata/N1.csv", sep=",")
head(football2)
football_points <-read_xlsx("../Sourcedata/football.xlsx")
head(football_points)
football_points1 <-read_xlsx("../Sourcedata/football.xlsx", skip=3)
head(football_points1)
football_budget <-read_xlsx("../Sourcedata/football.xlsx", sheet="Budgets", skip=3)
head(football_budget)
football_budget1 <-read_xlsx("../Sourcedata/football.xlsx", sheet=2, skip=3)
head(football_budget1)
write.csv2(football, file = "../Output/Myfootballdata.csv")
str(football)
football$Club <- as.character(football$Club)
football$Points_numeric <- as.numeric(football$Points)
str(football)
variable_factor <- as.factor(c(3,3,3,3,3,4,4,4))
str(variable_factor)
variable_numeric_wrong <- as.numeric(variable_factor)
variable_numeric_wrong
variable_numeric <- as.numeric(as.character(variable_factor))
variable_numeric
library(tidyverse)
library(tidyverse)
data1 <- data.frame(
Hospital= c("Gigant","Moloch","Mega"),
Revenue = c(100, 95, 90),
stringsAsFactors = FALSE
)
print(data1)
data2 <- data.frame(
Hospital= c("Gigant","Moloch","ZBC"),
Profit = c(10, 11, 5),
stringsAsFactors = FALSE
)
print(data2)
library(thematicmaps)
library(tidyverse)
library(stringr)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
AddMapLayer(MapPlot(), map_municipal)
pop_data <- read.csv2("../Sourcedata/nld_municipal_data.csv")
map_info <- pop_data %>%
select(name, pop_65plus)
str(map_info)
AddMapLayer(MapPlot(), map_municipal, map_info)+ guides(fill=guide_legend(title="Percentage of Elderly (65+)\nin the population"))
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".", row.names = F)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".", row.names = TRUE)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".", row.names = NULL)
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".",  row.names = 1)
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".",  row.names = 1)
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".",  row.names = 1) %>%
select(-code)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".",  row.names = FALSE) %>%
select(-code)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".",  row.names = "FALSE") %>%
select(-code)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".") %>%
select(-code)
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".") %>%
select(-" ")
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".", row.names = 1)
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
map_municipal <- read.csv("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_data.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
library(tidyverse)
library(gvlma)
library(thematicmaps)
library(tidyverse)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
AddMapLayer(MapPlot(), map_municipal)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map", stringsAsFactors = FALSE, dec = ".")
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
head(map_municipal)
install.packages('maptools', repos='http://cran.us.r-project.org')
install.packages('rgdal', repos='http://cran.us.r-project.org')
install.packages('rgeos', repos='http://cran.us.r-project.org')
install.packages("../Package//thematicmaps_2.1.tar.gz", repos = NULL, type = "source")
library(thematicmaps)
library(tidyverse)
library(stringr)
map_municipal <- read.csv2("../Sourcedata/nld_municipal_map.csv", stringsAsFactors = FALSE, dec = ".")
suppressWarnings(library(tidyverse))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(gvlma))
install.packages("gvlma")
suppressWarnings(library(tidyverse))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(gvlma))
install.packages(c("backports", "BH", "callr", "caret", "curl", "DBI", "dbplyr", "ddalpha", "devtools", "digest", "doSNOW", "DRR", "forcats", "foreach", "git2r", "haven", "hexbin", "hms", "htmlwidgets", "httpuv", "iterators", "kableExtra", "knitr", "lava", "lubridate", "matchingMarkets", "openssl", "PerformanceAnalytics", "Rcpp", "RcppArmadillo", "RCurl", "recipes", "reprex", "reshape2", "rlang", "rmarkdown", "rprojroot", "stargazer", "stringr", "tibble", "tidyr", "tidyselect", "timeDate", "viridisLite", "withr", "xgboost", "xml2", "xts", "yaml", "zoo"))
gvlma(regression)
suppressWarnings(library(tidyverse))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(gvlma))
gvlma(model2)
suppressWarnings(library(tidyverse))
suppressWarnings(library(PerformanceAnalytics))
suppressWarnings(library(gvlma))
df1 <- read.csv2("../Sourcedata/football.csv")
str(df1)
summary(df1)
plot1 <-ggplot(data=df1, aes(x=Budget, y=Points)) + geom_point()
plot1
plot2 <- plot1 + geom_hline(yintercept =  mean(df1$Points)) +
geom_segment((aes(x = df1$Budget, y = df1$Points, xend = df1$Budget, yend = mean(Points), color= "red"))) +
theme(legend.position="none")
plot2
df1 <- df1 %>%
mutate(new_try= 30 + Budget)
df1
plot2a <- plot1  + geom_abline(intercept = 30, slope=1, color="blue", size=2)  +
geom_segment((aes(x = df1$Budget, y = df1$Points, xend = df1$Budget, yend = df1$new_try, color= "red"))) +
theme(legend.position="none")
plot2a
plot3 <- plot1 + geom_smooth(method= "lm", se=FALSE)
plot3
# First try
df1 <- df1 %>%
mutate(mean_points=mean(Points)) %>%
mutate(squared_distance= (Points-mean_points)^2)
# New try
df1 <- df1 %>%
mutate(squared_distance_new_try= (Points-new_try)^2)
# Best line
regression <- lm(data=df1, Points ~ Budget)
df1 <- df1 %>%
mutate(prediction_lm =regression$fitted.values) %>%
mutate(squared_distance_lm = (Points-prediction_lm)^2)
head(df1)
df2 <- df1 %>%
select(squared_distance, squared_distance_new_try, squared_distance_lm) %>%
gather(Model, Squared_distance, 1:3) %>%
group_by(Model) %>%
summarise(squared_distance= sum(Squared_distance)) %>%
arrange(squared_distance)
df2
summary(regression)
gvlma(regression)
set.seed(123)
x1 <- runif(10000, min = 0, max = 1000)
df3 <- as.data.frame(x1) %>%
mutate(x2 =  runif(10000, min = 500, max = 1000)) %>%
mutate(error = rnorm(10000, mean = 0, sd = 100)) %>%
mutate(y= 6000 + 3*x1 + 10 * x2 + error)
suppressWarnings(chart.Correlation(df3, histogram = TRUE))
model1 <- lm(y~x1, data= df3)
summary(model1)
gvlma(model1)
df3 <- df3 %>%
mutate(pred_model1= model1$fitted.values)
ggplot(data=df3, aes(x=y, y=pred_model1)) + geom_point()
model2<-lm(y~x1+ x2, data=df3)
summary(model2)
df3 <- df3 %>%
mutate(pred_model2= model2$fitted.values)
ggplot(data=df3, aes(x=y, y=pred_model2)) + geom_point()
gvlma(model2)
library(tidyverse)
library(PerformanceAnalytics)
library(gvlma)
library("Benchmarking", lib.loc="~/R/win-library/3.4")
